import java.util.*;

class PolyNode {
    int coefficient;
    int power;
    PolyNode next;

    PolyNode(int c, int p) {
        this.coefficient = c;
        this.power = p;
        this.next = null;
    }
}

public class PolynomialSubtraction {

    public PolyNode subtractionPolynomials(PolyNode poly1, PolyNode poly2) {
        PolyNode dummy = new PolyNode(0, 0);
        PolyNode current = dummy;

        while (poly1 != null && poly2 != null) {
            if (poly1.power > poly2.power) {
                current.next = new PolyNode(poly1.coefficient, poly1.power);
                poly1 = poly1.next;
            } else if (poly1.power < poly2.power) {
                current.next = new PolyNode(-poly2.coefficient, poly2.power);
                poly2 = poly2.next;
            } else {
                int diff = poly1.coefficient - poly2.coefficient;
                if (diff != 0) {
                    current.next = new PolyNode(diff, poly1.power);
                }
                poly1 = poly1.next;
                poly2 = poly2.next;
            }
            if (current.next != null) {
                current = current.next;
            }
        }

        while (poly1 != null) {
            current.next = new PolyNode(poly1.coefficient, poly1.power);
            poly1 = poly1.next;
            current = current.next;
        }

        while (poly2 != null) {
            current.next = new PolyNode(-poly2.coefficient, poly2.power);
            poly2 = poly2.next;
            current = current.next;
        }

        return dummy.next;
    }

    public void printPolynomial(PolyNode head) {
        while (head != null) {
            System.out.print(head.coefficient);
            if (head.power > 1) {
                System.out.print("x^" + head.power);
            } else if (head.power == 1) {
                System.out.print("x");
            }
            if (head.next != null) {
                System.out.print(" + ");
            }
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        PolynomialSubtraction ps = new PolynomialSubtraction();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of terms in Polynomial 1: ");
        int n1 = scanner.nextInt();
        PolyNode poly1 = null, tail1 = null;

        for (int i = 0; i < n1; i++) {
            System.out.println("Enter coefficient and power for term " + (i + 1) + ":");
            int coefficient = scanner.nextInt();
            int power = scanner.nextInt();
            PolyNode node = new PolyNode(coefficient, power);

            if (poly1 == null) {
                poly1 = tail1 = node;
            } else {
                tail1.next = node;
                tail1 = node;
            }
        }

        System.out.print("\nEnter the number of terms in Polynomial 2: ");
        int n2 = scanner.nextInt();
        PolyNode poly2 = null, tail2 = null;

        for (int i = 0; i < n2; i++) {
            System.out.println("Enter coefficient and power for term " + (i + 1) + ":");
            int coefficient = scanner.nextInt();
            int power = scanner.nextInt();
            PolyNode node = new PolyNode(coefficient, power);

            if (poly2 == null) {
                poly2 = tail2 = node;
            } else {
                tail2.next = node;
                tail2 = node;
            }
        }

        System.out.println("\nPolynomial Equation 1:");
        ps.printPolynomial(poly1);

        System.out.println("Polynomial Equation 2:");
        ps.printPolynomial(poly2);

        PolyNode result = ps.subtractionPolynomials(poly1, poly2);

        System.out.println("Result (poly1 - poly2):");
        ps.printPolynomial(result);
    }
}








class PolyNode {
    int coefficient;
    int power;
    PolyNode next;

    PolyNode() {}

    PolyNode(int c, int p) {
        coefficient = c;
        power = p;
        next = null;
    }
}

public class PolynomialAddition {

    public PolyNode addPolynomials(PolyNode poly1, PolyNode poly2) {
        PolyNode dummy = new PolyNode(0, 0);
        PolyNode current = dummy;

        while (poly1 != null && poly2 != null) {
            if (poly1.power > poly2.power) {
                current.next = new PolyNode(poly1.coefficient, poly1.power);
                poly1 = poly1.next;
            } else if (poly1.power < poly2.power) {
                current.next = new PolyNode(poly2.coefficient, poly2.power);
                poly2 = poly2.next;
            } else {
                int sum = poly1.coefficient + poly2.coefficient;
                if (sum != 0) {
                    current.next = new PolyNode(sum, poly1.power);
                }
                poly1 = poly1.next;
                poly2 = poly2.next;
            }

            if (current.next != null)
                current = current.next;
        }

        while (poly1 != null) {
            current.next = new PolyNode(poly1.coefficient, poly1.power);
            poly1 = poly1.next;
            current = current.next;
        }

        while (poly2 != null) {
            current.next = new PolyNode(poly2.coefficient, poly2.power);
            poly2 = poly2.next;
            current = current.next;
        }

        return dummy.next;
    }

    // Helper function to print the polynomial
    public void printPolynomial(PolyNode head) {
        while (head != null) {
            System.out.print(head.coefficient + "x^" + head.power);
            if (head.next != null)
                System.out.print(" + ");
            head = head.next;
        }
        System.out.println();
    }

    // Test method
    public static void main(String[] args) {
        PolynomialAddition pa = new PolynomialAddition();

        // First Polynomial: 5x^3 + 4x^2 + 2
        PolyNode poly1 = new PolyNode(5, 3);
        poly1.next = new PolyNode(4, 2);
        poly1.next.next = new PolyNode(2, 0);

        // Second Polynomial: 5x^1 + 5x^0
        PolyNode poly2 = new PolyNode(5, 1);
        poly2.next = new PolyNode(5, 0);

        System.out.print("Poly1: ");
        pa.printPolynomial(poly1);

        System.out.print("Poly2: ");
        pa.printPolynomial(poly2);

        PolyNode result = pa.addPolynomials(poly1, poly2);

        System.out.print("Result: ");
        pa.printPolynomial(result);
    }
}
